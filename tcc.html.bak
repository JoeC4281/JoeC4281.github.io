<!DOCTYPE html>
<html lang="en">
<head>
    
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta charset="utf-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <style>
/*!
 *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome
 *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)

</style>
    <style>
html, body {
  color: #eee;
  background: #303030;
  font-family: -apple-system, BlinkMacSystemFont,"Segoe UI", Helvetica, Helvetica, Arial, sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 17px;
  height: 100%;
  line-height: 1.6;
  padding: 5px 10px 5px 20px;
  margin: 0;
  scrollbar-track-color: #535353;
  scrollbar-arrow-color: silver;
  scrollbar-face-color: #555;
  -ms-overflow-style: -ms-autohiding-scrollbar !important;
}
body::-webkit-scrollbar {
  width: 0.7em;
  height: 2em;
  background: #444;
}
body::-webkit-scrollbar-thumb {
  background: #999;
  border-radius: 3px;
} 
b, strong {
  font-weight: 600;
}

a {
  font-weight: 600;
  color: #6e9fde;
  text-decoration: none;
}

  a:hover {
    text-decoration: underline;
  }

p {
  margin: 0.5rem 0 1em 0;
}

code {
  font-family: menlo,consolas,monospace;
  color: #eee;
  background: #555;
  padding: 2px 5px;
  font-weight: bold;
  border-radius: 2px;
}

pre {
  font-family: menlo,consolas,monospace;
  font-weight: normal;
  font-size: 0.875em;
  margin: 7px 10px;
  padding: 0;
  border: 1px solid #555;
  border-radius: 5px;
  overflow-x: auto;
  max-width: 98%;
  background: #1E1E1E;
  color: #DCDCDC;
  white-space: pre; /* pre-line if you want to wrap*/
}

  pre > code {
    white-space: pre;
    padding: 0.8em !important;
    display: block;
    background: transparent;
    font-weight: normal;
    white-space: pre; /* pre-line if you want to wrap*/
  }
  pre>code::-webkit-scrollbar {
    width: 8px;
    height: 8px;        
    background: #444;    
  }
  pre > code::-webkit-scrollbar-thumb {
    background:#999;
  }
table {
  width: 100%;
  overflow: auto;
  border-spacing: 0;
  border-collapse: collapse;
  x-margin: 5px 0;
  color: white;
  border-color: gray;
}

td, th {
  border: 1px solid #555;  
  padding: 6px 13px;
  display: table-cell;
  vertical-align: top;
}

th {
  font-weight: bold;
  background: #252525;  
}

tbody > tr:nth-child(even) {
  background: #444;
}


h1, h2, h3, h4, h5, h6, .byline, .content-title {
  color: #ababab;
  font-weight: 600;
  margin-top: 1.2em;
  margin-bottom: 0.5em;
}

h1 {
  font-size: 1.9em;
  padding-bottom: 15px;
  border-bottom: 1px solid #999;
  color: #eee;
}

h2 {
  font-size: 1.55em
}

h3 {
  font-size: 1.35em
}

h4 {
  font-size: 1.2em
}

h5 {
  font-size: 1.1em;
}

h6 {
  font-size: 1.03em;
}


img {
  max-width: 100%;
}


blockquote {
  background: #606060 !important;
  color: #fcfcfc !important;
  font-size: 1.05em;
  padding: 15px 20px;
  margin: 1.2em;
  border-left: 8px #ddd solid;
  border-radius: 4px 0 0 4px;
}

  blockquote *:first-child {
    margin-top: 0;
    margin-bottom: 0;
  }

  blockquote *:last-child {
    margin-bottom: 0;
  }

ul > li > ul > li > ul > li {
  list-style: disc;
}

ul > li > ul > li {
  list-style: square;
}

.task-list-item {
  list-style: none;
  margin-left: -2em;
}

dt {
  font-size: 1.08em;
  font-weight: bold;
  text-decoration: underline;
  padding-top: 0.5em;
}

dd {
  margin: 0;
  padding: 0 0 0.2em 1em;
}

hr {
  margin: 12px 0;
}

.figure .caption, figure figcaption {
  font-size: 0.8em;
  font-style: italic;
  margin-top: 0;
}
/* hidden display, but still part of document flow */
.hidden {
  display: none;
}

.hidden-nowidth {
  width: 0;
}

.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.line-highlight {
  background: #444 !important;
}

p.line-highlight, h1.line-highlight, h2.line-highlight, h3.line-highlight, h4.line-highlight {
  border-radius: 4px;
  margin-left: -10px;
  margin-right: -10px;
  padding-left: 10px;
  padding-right: 10px;
}


/* DocFx Styles*/
.CAUTION, .IMPORTANT, .INFO, .TIP, .NOTE, .WARNING {
  padding: 0.1px 20px;
  margin: 15px 0;
  border-radius: 4px;
}

.CAUTION > h5, .IMPORTANT > h5, .INFO > h5, .TIP > h5, .NOTE > h5, .WARNING > h5 {
  color: inherit;
}

.CAUTION, .IMPORTANT {
  color: #a94442;
  background-color: #f2dede;
  border-color: #ebccd1;
}

.WARNING {
  color: #8a6d3b;
  background-color: #fcf8e3;
  border-color: #faebcc;
}

.INFO, .TIP, .NOTE {
  color: #31708f;
  background-color: #d9edf7;
  border-color: #bce8f1;
}

.NOTE h5:before, .TIP h5:before {
  content: "\f05a";
  font-family: FontAwesome;
  padding-right: 6px;
}

.WARNING h5:before, .CAUTION h5:before {
  content: "\f071";
  font-family: FontAwesome;
  padding-right: 6px;
}

.IMPORTANT h5:before {
  content: "\f06a";
  font-family: FontAwesome;
  padding-right: 6px;
}

xref {
  display: block;
}




@media(min-width: 1080px) {
  html, body {
    font-size: 1.1em;
  }
}

@media print {
    html, body {
        font-family: "Segoe UI Emoji", "Apple Color Emoji", -apple-system, BlinkMacSystemFont,"Segoe UI", Helvetica, Helvetica, Arial, sans-serif;
        text-rendering: optimizeLegibility;
        height: auto;
    }
    pre {
    white-space: pre-wrap;
    word-break: normal;
    word-wrap: normal;
  }

    pre > code {
        white-space: pre-wrap;
        padding: 1em !important;

        /* highlightjs fix for wkhtmltopdf */
        background: #252525;
        color: #E2E2E2;
    }
}

</style>

    <style>
/*
 * Visual Studio 2015 dark style
 * Author: Nicolas LLOBERA <nllobera@gmail.com>
 */

.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  background: #1E1E1E;
  color: #DCDCDC;
  font-weight: normal;  
  font-size: 1.15em !important;  
}

.hljs-keyword,
.hljs-literal,
.hljs-symbol,
.hljs-name {
  color: #569CD6;
}
.hljs-link {
  color: #569CD6;
  text-decoration: underline;
}

.hljs-built_in,
.hljs-type {
  color: #4EC9B0;
}

.hljs-number,
.hljs-class {
  color: #B8D7A3;
}

.hljs-string,
.hljs-meta-string {
  color: #D69D85;
}

.hljs-regexp,
.hljs-template-tag {
  color: #9A5334;
}

.hljs-subst,
.hljs-function,
.hljs-title,
.hljs-params,
.hljs-formula {
  color: #DCDCDC;
}

.hljs-comment,
.hljs-quote {
  color: #57A64A;
  font-style: italic;
}

.hljs-doctag {
  color: #608B4E;
}

.hljs-meta,
.hljs-meta-keyword,
.hljs-tag {
  color: #9B9B9B;
}

.hljs-variable,
.hljs-template-variable {
  color: #BD63C5;
}

.hljs-attr,
.hljs-attribute,
.hljs-builtin-name {
  color: #9CDCFE;
}

.hljs-section {
  color: gold;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: bold;
}

/*.hljs-code {
  font-family:'Monospace';
}*/

.hljs-bullet,
.hljs-selector-tag,
.hljs-selector-id,
.hljs-selector-class,
.hljs-selector-attr,
.hljs-selector-pseudo {
  color: #D7BA7D;
}

.hljs-addition {
  background-color: #144212;
  display: inline-block;
  width: 100%;
}

.hljs-deletion {
  background-color: #600;
  display: inline-block;
  width: 100%;
}

</nllobera@gmail.com></style>
    <script src="data:text/javascript;base64,"></script>
    <script src="data:text/javascript;base64," id="PreviewScript"></script>
    
</head>
<body>
<div id="MainContent">
    <!-- Markdown Monster Content -->
    <title>TCC (Take Command Console)</title>
<h1 id="tcc-take-command-console">TCC (Take Command Console)</h1>
<p><a href="index.html">Back To Joe's Notes</a></p>
<ul>
<li><a href="https://joec4281.github.io/Alias.lst.html">Alias.lst</a></li>
<li><a href="https://joec4281.github.io/CMDebug-Shortcut-Keys.html">CMDebug Shortcut Keys</a></li>
<li><a href="https://joec4281.github.io/How-Do-I....html">How Do I...</a></li>
<li><a href="https://joec4281.github.io/forum.html">JPSoft Forum Posts</a></li>
<li><a href="https://joec4281.github.io/Libraries.html">Libraries</a></li>
<li><a href="Plugins.html">Plugins</a></li>
<li><a href="TCCWinAPI.html">WinAPI Functions</a></li>
</ul>
<p><a href="index.html">Back To Joe's Notes</a></p>

    <!-- End Markdown Monster Content -->
</div>
</body>
</html>
